---
title: "Science-Policy Data Analysis"
author: "Zhenzhuo(Star) Xian"
date: 02/08/2023
format: html
editor: visual
---

```{r}
#Load packages
#install.packages("bibliometrix", dependencies=TRUE) ### installs bibliometrix package and dependencies
library(bibliometrix)   #uploads the package
library(tidyverse)
```

note: The titles marked with an initial "U" in the outline representing the within information was used in my report

```{r}
bib <- convert2df("science-policy.bib", dbsource = "scopus", format = "bibtex") # Convert to a bibliometric data frame
#> Converting the scopus collection into a bibliographic dataframe
names(bib)
#View(bib)
#write.csv(bib, "science-policy.csv", row.names = FALSE) #if you want to save this data frame as a csv file

dim(bib)  # see how many dimensions in this data frame
```

## The Most Productive Authors

```{r}
# head(bib$AU) #have a look at the few records on the screen
authors <- bib$AU
authors <- unlist(strsplit(authors, ";")) #split the records into individual authors
authors <- authors[order(authors)] #order alphabetically
head(authors) #have a look again
#View(unique(authors)) # use to see all the values
#write.csv(authors, "the most productive authors.csv", row.names = FALSE) #if want to save this data frame as a csv file

#View(bib)
```

## Summarising bibliometric data

(will change to 232 records matched the bibliometric dataframe)- Analysis afterwords in 7th Step (click through the outline)

```{r}

# Preliminary descriptive analyses 
results <- biblioAnalysis(bib, sep = ";")
summary(object = results, k = 10, pause = TRUE) #display a series of summary tables

```

```{r}
plot(results, k = 10, pause=TRUE) #this takes top 10 values from each plottable table
```

```{r}

#the code below is for saving these plots into a pdf:
# pdf(file = "plots/bib_descriptive_plots.pdf", height = 8, width = 8, pointsize=10) #
# plot(results, k = 20, pause=FALSE) #this takes top 20 values from each plottable table
# dev.off()

```

# 1. Bibliographic Collaboration

is a network where nodes are authors and links are co-authorships of the papers.

```{r}
# Create a bibliographic network (collaboration network) using the "biblioNetwork" function
# `NetMatrix` will store the resulting collaboration network
NetMatrix <- biblioNetwork(bib, analysis = "collaboration", network = "authors", sep = ";")


# Create a network plot for the collaboration network stored in `NetMatrix`
# `net` will store the resulting network plot
net <- networkPlot(NetMatrix, weighted = NULL, n = 20, Title = "Authors' collaborations", type = "fruchterman", size = 5, remove.multiple = TRUE, labelsize = 0.5)


```

# 2. Country Scientific Collaboration

we can visualise authors from which countries publish papers together most frequently.

```{r}

# Extract countries from the affiliations in the bibliographic data
# The function `metaTagExtraction` is used to extract country information from the "AU_CO" field (affiliation) of the `bib` data.
# The extracted country information will be separated by the semicolon `;`.
bib <- metaTagExtraction(bib, Field = "AU_CO", sep = ";") #we need to extract countries from the affiliations first

# Create a bibliographic network (collaboration network) based on countries
# The function `biblioNetwork` is used to construct a network of collaborations among countries.
# The resulting network will be stored in `NetMatrix`.
NetMatrix <- biblioNetwork(bib, analysis = "collaboration", network = "countries", sep = ";")

# Create a network plot for the collaboration network stored in `NetMatrix`
# The function `networkPlot` is used to visualize the country collaboration network.
# The resulting plot will be stored in the variable `net`.
net <- networkPlot(NetMatrix, n = 20, Title = "Country Collaboration", type = "auto", size = TRUE, remove.multiple = FALSE, labelsize = 0.5)
```

# 3. Keyword co-occurrences

we can also visualise which papers share most keywords (from the Scopus database)

```{r}

# Create a bibliographic network based on co-occurrences of keywords
# The function `biblioNetwork` is used to construct a network of co-occurrences among keywords in the `bib` data.
# The resulting network will be stored in `NetMatrix`.
NetMatrix <- biblioNetwork(bib, analysis = "co-occurrences", network = "keywords", sep = ";")

# Create a network plot for the keyword co-occurrence network stored in `NetMatrix`
# The function `networkPlot` is used to visualize the keyword co-occurrence network.
# The resulting plot will be stored in the variable `net`.
net <- networkPlot(NetMatrix, n = 50, Title = "Keyword co-occurance", type = "fruchterman", size = T, remove.multiple = FALSE, labelsize = 0.7, edgesize = 5)
```

```{r}

# Create a bibliographic network based on co-occurrences of author keywords
# The function `biblioNetwork` is used to construct a network of co-occurrences among author keywords in the `bib` data.
# The resulting network will be stored in `NetMatrix`.
NetMatrix <- biblioNetwork(bib, analysis = "co-occurrences", network = "author_keywords", sep = ";")


# Create a network plot for the author keyword co-occurrence network stored in `NetMatrix`
# The function `networkPlot` is used to visualize the author keyword co-occurrence network.
# The resulting plot will be stored in the variable `net`.
net <- networkPlot(NetMatrix, n = 10, Title = "Keyword co-occurance", type = "fruchterman", size = T, remove.multiple = FALSE, labelsize = 0.7, edgesize = 5)
```

# 4. Co-Word Analysis

```{r}
# Generate a conceptual structure (network) based on bibliographic data
# The function `conceptualStructure` is used to create a network of conceptual relationships among items in the `bib` data.
CS <- conceptualStructure(bib, field = "ID", minDegree = 20, k.max = 5, stemming = FALSE, labelsize = 10)
```

The code above uses field = "ID". ID stands for "Keywords Plus associated by ISI or SCOPUS database", to analyse the "conceptualStructure". could try using authors keywords, "DE" field, instead of "ID".

```{r}
# Generate a conceptual structure (network) based on bibliographic data using keywords (DE - Descriptors)
# The function `conceptualStructure` is used to create a network of conceptual relationships among items in the `bib` data based on their keywords (descriptors).
CS <- conceptualStructure(bib, field = "DE", minDegree = 20, k.max = 2, stemming = FALSE, labelsize = 10)
```

You can use different types of network plots - just tweak "type" parameter in the *networkPlot* function (check the vignette for the available options). "Type" parameter indicates the network map plotting layout: circle, kamada-kawai, mds, etc.

You can use non-R tools to visualise bibliographic networks, e.g.Â VOSviewer software by Nees Jan van Eck and Ludo Waltman (<http://www.vosviewer.com>). When in R function you use type="vosviewer", the function will export the network as a standard "pajek" network file (named "vosnetwork.net"), which can then be used in other network-plotting software, including VOSviewer.

# 5. Load Files From Rayyan

```{r}

screened <- read.csv("Rayyan2.csv")
names(screened) #can see there are fewer columns in the exported file
dim(screened) #note that many fields get collapsed into the "notes" field

screened$decisions_labels <- sub(".*RAYYAN-INCLUSION: ", "", screened$notes)
screened$decisions_labels[1:10] #some have labels

#filter out (remove) rows that contain the string 'Excluded' ' in the decisions_labels column:
screened %>% filter(!grepl('Excluded', decisions_labels)) -> screened_included
dim(screened_included) 

#extract record labels from decisions_labels column - i.e. string after "RAYYAN-LABELS: "
screened_included$labels <- sub(".*RAYYAN-LABELS: ", "", screened_included$decisions_labels)

#extract record labels from decisions_labels column - i.e. string after "RAYYAN-LABELS: "
screened_included$labels <- sub(".*RAYYAN-LABELS: ", "", screened_included$decisions_labels)

#see what values are there per record:
table(screened_included$labels) #some dont have labels: {"Losia"=>"Included"}

```

```{r}
dim(screened_included) # see how many dimensions in this dataframe
screened_included %>% filter(grepl('scopus', url)) %>% nrow() # 236 records from Scopus have doi contained in their url string: screened_included$url

```

# 6. Merge data frames by article titles

```{r}
# joining by DOI
screened_included$DI <- screened_included$doi
# View(screened_included)


# The field 'TI2' will now be used for merging info from onto bib data frame
#bib_title <- left_join(bib, screened_included %>% dplyr::select(url, title, DI, year, journal, labels), by = "DI")
#View(bib_title)
#table(is.na(bib_title$labels)) #234 records with labels, these were included in Rayyan


#before joining by title, need to tidy up titles

# Removing all punctuation and extra white spaces in bib object, in order to compare dataframes by Title:
bib$TI2 <- str_replace_all(bib$TI,"[:punct:]","") %>% str_replace_all(.,"[ ]+", " ") 
#View(bib)

dim(bib)  #234 records included

# Remove all punctuation and extra white spaces in screened_included object, in order to compare dataframes by Title:
screened_included$TI2 <- str_to_upper(str_replace_all(screened_included$title,"[:punct:]","")) %>% str_replace_all(.,"[ ]+", " ")

View(screened_included)
View(bib)

# The field 'TI2' will now be used for merging info from onto bib data frame
bib_title <- left_join(bib, screened_included %>% dplyr::select(url, title, TI2, year, journal, labels), by = "TI2")

# Save the data frame as a CSV file
#write.csv(bib_title, file = "bib_title.csv", row.names = FALSE)


#View(bib_title)
table(is.na(bib_title$labels)) #234 records with labels, these were included in Rayyan


#only keep rows with labels
bib_title %>% filter(!is.na(labels)) -> bib_title_included
dim(bib_title_included) #232 records included



table(bib_title_included$labels)# Create a table displaying the frequency of unique values in the 'labels' column of the 'bib_title_included' data frame.
names(bib_title_included) #now we have bibliometric file with only included articles and with labels

#View(bib_title_included)
```

# 7. Offical Bibiliometric Analysis

## New bibliometrix Data Analysis(n=232, after combining bib dataframe with Rayyan dataframe)

### U Table (Countries - First authors counts)

```{r}
results <- biblioAnalysis(bib_title_included, sep = ";")
summary(object = results, k = 10, pause = TRUE) #display a series of summary tables

dim(bib_title_included)
plot(results, k = 10, pause=TRUE) #this takes top 10 values from each plottable table


```

### U Annual Scientific Production

```{r}
# Preliminary descriptive analyses using summary function
results <- biblioAnalysis(bib_title_included, sep = ";")
#summary(object = results, k = 10, pause = TRUE) #display a series of summary tables
plot(results, k = 10, pause = TRUE) #this takes top 10 values from each table

```

# 8. Process manual labels from Rayyan

```{r}
#create topic variable
bib_title_included <- bib_title_included %>%          
         mutate(Field3 = case_when(str_detect(labels, "Environmental Governance") ~ "Environmental Governance", #just Environmental Governance
                               str_detect(labels, "Economics and Social" ) ~ "Economics and Social", #just Economics and Social
                                str_detect(labels, "Terrestrial Natural Ecosystems and Biodiversity" ) ~ "Terrestrial Natural Ecosystems and Biodiversity", #just Terrestrial Natural Ecosystems and Biodiversity
                                str_detect(labels, "Aquatic Ecosystems" ) ~ "Aquatic Ecosystems", #just Aquatic Ecosystems
                                str_detect(labels, "Other" ) ~ "Other", #just Other
                                str_detect(labels, "Big Data" ) ~ "Big Data", #just Big Data
                                str_detect(labels, "Energy" ) ~ "Energy", #just Energy
                                str_detect(labels, "Atmospheric Science" ) ~ "Atmospheric Science", #just Atmospheric Science
                               str_detect(labels, "Health" ) ~ "Health", #just Health
                                str_detect(labels, "Agriculture" ) ~ "Agriculture", #just Agriculture
                                str_detect(labels, "Environmental Accounting" ) ~ "Environmental Accounting", #just Environmental Accounting
                               TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included) #just solution

table(bib_title_included$Field3)

View(bib_title_included)

```

```{r}

# test with the field of "Health"

bib_title_included <- bib_title_included %>%          
         mutate(Field4 = case_when(str_detect(labels, "Health") ~ "Health", #just Health, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included)

table(bib_title_included$Field4)
# View(bib_title_included)
```

```{r}

# test with the field of "Environmental Accounting"

bib_title_included <- bib_title_included %>%          
         mutate(Field5 = case_when(str_detect(labels, "Environmental Accounting") ~ "Environmental Accounting", #just Environmental Accounting, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included)

table(bib_title_included$Field5)
View(bib_title_included)
```

### Study Fields Separation

```{r}
# Step 1: Mutate columns for each study field
bib_title_included <- bib_title_included %>%          
         mutate(Field1 = case_when(str_detect(labels, "Terrestrial Natural Ecosystems and Biodiversity") ~ "Terrestrial Natural Ecosystems and Biodiversity", #just Terrestrial Natural Ecosystems and Biodiversity, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included)

table(bib_title_included$Field1)
#View(bib_title_included)



bib_title_included <- bib_title_included %>%          
         mutate(Field2 = case_when(str_detect(labels, "Economics and Social") ~ "Economics and Social", #just Economics and Social, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included)

table(bib_title_included$Field2)
#View(bib_title_included)

bib_title_included <- bib_title_included %>%          
         mutate(Field3 = case_when(str_detect(labels, "Environmental Governance") ~ "Environmental Governance", #just Environmental Governance, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included)

table(bib_title_included$Field3)
#View(bib_title_included)


bib_title_included <- bib_title_included %>%          
         mutate(Field4 = case_when(str_detect(labels, "Health") ~ "Health", #just Health, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included)

table(bib_title_included$Field4)
# View(bib_title_included)

bib_title_included <- bib_title_included %>%          
         mutate(Field5 = case_when(str_detect(labels, "Environmental Accounting") ~ "Environmental Accounting", #just Environmental Accounting, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included)

table(bib_title_included$Field5)
View(bib_title_included)


bib_title_included <- bib_title_included %>%          
         mutate(Field6 = case_when(str_detect(labels, "Aquatic Ecosystems") ~ "Aquatic Ecosystems and Biodiversity", #just Aquatic Ecosystems, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included)

table(bib_title_included$Field6)
#View(bib_title_included)


bib_title_included <- bib_title_included %>%          
         mutate(Field7 = case_when(str_detect(labels, "Big Data") ~ "Big Data", #just Big Data, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included)

table(bib_title_included$Field7)
#View(bib_title_included)

bib_title_included <- bib_title_included %>%          
         mutate(Field8 = case_when(str_detect(labels, "Energy") ~ "Energy", #just Energy, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included)

table(bib_title_included$Field8)
#View(bib_title_included)

bib_title_included <- bib_title_included %>%          
         mutate(Field9 = case_when(str_detect(labels, "Atmospheric Science") ~ "Atmospheric Science", #just Atmospheric Science, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included)

table(bib_title_included$Field9)
#View(bib_title_included)

bib_title_included <- bib_title_included %>%          
         mutate(Field10 = case_when(str_detect(labels, "Agriculture") ~ "Agriculture", #just Agriculture, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included)

table(bib_title_included$Field10)
#View(bib_title_included)


bib_title_included <- bib_title_included %>%          
         mutate(Field11 = case_when(str_detect(labels, "Other") ~ "Other", #just Other, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included)

table(bib_title_included$Field11)
View(bib_title_included)

```

## Solution&Policy

```{r}

# Mutate columns for the category of "solution" and that of "Policy" respectively

bib_title_included2 <- bib_title_included %>%          
         mutate(solution = case_when(str_detect(labels, "solution") ~ "solution", #just solution, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included2)

table(bib_title_included2$solution)
#View(bib_title_included2)



bib_title_included2 <- bib_title_included2 %>%          
         mutate(Policy = case_when(str_detect(labels, "Policy") ~ "Policy", #just Policy, 
                                   TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included2)

table(bib_title_included2$Policy)
#View(bib_title_included2)



```

# 9. Make simple plots based on labels

Plot with one variable with label counts

```{r}

# Test with the field of Health

#calculate and sort by count
count_topic <- bib_title_included %>%
    count(Field4) %>%
    arrange(desc(n))



#calculate percentages
percent_topic <- count_topic %>%
    mutate(percent = (n/sum(n)) * 100)

#round percentages
percent_topic$percent <- round(percent_topic$percent, digits = 0)

#as factor and ordering for a nicer plot
percent_topic$Field4 <- factor(percent_topic$Field4,
    level = percent_topic$Field4 [order(percent_topic$n, decreasing = TRUE)])

#for manually setting fill colours
my.cols <- (c("#BEAED4", "#FFFF99", "#386CB0")) 

#make the plot
ggplot(percent_topic, aes(x = Field4, y = percent)) + 
  geom_col(aes(fill = Field4), width = 0.7) + 
  geom_text(aes(label = percent), hjust = -0.2) + coord_flip() +
  scale_y_continuous(name = "Percent (%)") + 
  xlab("topic") + 
  scale_fill_manual(values = my.cols) +
  theme_classic() + 
  theme(legend.position = "none")



```

```{r}

# For solutions - Percentage of papers mentioning "solution"

#calculate and sort by count
count_topic <- bib_title_included2 %>%
    count(solution) %>%
    arrange(desc(n))

#calculate percentages
percent_topic <- count_topic %>%
    mutate(percent = (n/sum(n)) * 100)

#round percentages
percent_topic$percent <- round(percent_topic$percent, digits = 0)

#as factor and ordering for a nicer plot
percent_topic$solution <- factor(percent_topic$solution,
    level = percent_topic$solution [order(percent_topic$n, decreasing = TRUE)])

#for manually setting fill colours
my.cols <- (c("#87CEFA", "#C1FFC1", "#386CB0")) 

#make the plot
ggplot(percent_topic, aes(x = solution, y = percent)) + 
  geom_col(aes(fill = solution), width = 0.7) + 
  geom_text(aes(label = percent), hjust = -0.2) + coord_flip() +
  scale_y_continuous(name = "Percent (%)") + 
  xlab("topic") + 
  scale_fill_manual(values = my.cols) +
  theme_classic() + 
  theme(legend.position = "none")



# For Policy - Percentage of papers mentioning Policy related words (governance, governement, decision-making, policy...)

#calculate and sort by count
count_topic <- bib_title_included2 %>%
    count(Policy) %>%
    arrange(desc(n))

#calculate percentages
percent_topic <- count_topic %>%
    mutate(percent = (n/sum(n)) * 100)

#round percentages
percent_topic$percent <- round(percent_topic$percent, digits = 0)

#as factor and ordering for a nicer plot
percent_topic$Policy <- factor(percent_topic$Policy,
    level = percent_topic$Policy [order(percent_topic$n, decreasing = TRUE)])

#for manually setting fill colours
my.cols <- (c("#104E8B", "#B3EE3A", "#386CB0")) 

#make the plot
ggplot(percent_topic, aes(x = Policy, y = percent)) + 
  geom_col(aes(fill = Policy), width = 0.7) + 
  geom_text(aes(label = percent), hjust = -0.2) + coord_flip() +
  scale_y_continuous(name = "Percent (%)") + 
  xlab("topic") + 
  scale_fill_manual(values = my.cols) +
  theme_classic() + 
  theme(legend.position = "none")


View(bib_title_included2 )


```

### U Solution Plot

```{r}
# Create a data frame 'data' to store the count and percentage information for two categories.
# The 'Category' column contains category names (e.g., "Solution" and "Unclear").
# The 'Count' column contains the count of occurrences for each category.
data <- data.frame(
  Category = c("Solution", "Unclear"),
  Count = c(152, 80)
)

# Calculate percentages for each category and add them as a new column 'Percent' in the 'data' data frame.
# The 'Percent' column will store the percentage of each category count relative to the total count.
data$Percent <- data$Count / sum(data$Count) * 100

# Define custom colors for the categories to be used in the bar plot.
# In this case, we have three colors for the two categories, "Solution" and "Unclear".
custom_colors <- c("#87CEFA", "#C1FFC1", "#386CB0") # You can replace these with your preferred colors

# Create a bar plot using 'ggplot2' library with the data stored in the 'data' data frame.
ggplot(data, aes(x = paste0(Percent, "%"), y = Count, fill = Category)) +
  geom_col(position = "dodge", width = 0.5) +
  geom_text(aes(label = Count), vjust = -0.5, size = 4, position = position_dodge(width = 0.5)) +
  scale_fill_manual(values = custom_colors) + # Use the custom colors
  labs(title = "Distribution of Articles Which Introduced Solutions: Counts and Percentage",
       x = "Percent",
       y = "Count")


```

### U Policy Plot

```{r}
# The 'data' data frame contains two columns: 'Category' for category names (e.g., "Policy" and "Unclear"),
# and 'Count' for the count of occurrences for each category.
data <- data.frame(
  Category = c("Policy", "Unclear"),
  Count = c(142, 90)
)

# Calculate percentages for each category and add them as a new column 'Percent' in the 'data' data frame.
# The 'Percent' column will store the percentage of each category count relative to the total count.
data$Percent <- data$Count / sum(data$Count) * 100

# Define custom colors for the categories to be used in the bar plot.
# In this case, we have three colors for the two categories, "Policy" and "Unclear".
custom_colors <- c("#104E8B", "#B3EE3A", "#386CB0") # You can replace these with your preferred colors

# Create a bar plot using 'ggplot2' library with the data stored in the 'data' data frame.
ggplot(data, aes(x = paste0(Percent, "%"), y = Count, fill = Category)) +
  geom_col(position = "dodge", width = 0.5) +
  geom_text(aes(label = Count), vjust = -0.5, size = 4, position = position_dodge(width = 0.5)) +
  scale_fill_manual(values = custom_colors) + # Use the custom colors
  labs(title = "Distribution of Articles Which Included Policy-related Words: Counts and Percentage",
       x = "Percent",
       y = "Count")

```

## 9.1 Plot topic by year:

```{r}

# not used

# Plot 1: Bar plot of article count for 'Field4' across different years
bib_title_included %>%
    count(year, Field4) %>%
    ggplot(aes(x = year, y = n, fill = Field4)) + 
    geom_col(width = 0.7) +
    geom_text(position = position_stack(vjust = 0.5), aes(fill = Field4, label = n)) + 
    theme_classic() + 
    labs(x = "Year", y = "Article count", fill = "Discipline") + 
    theme(legend.position = "none", axis.title.x = element_text(size = 10))

# Plot 2: Bar plot of article count for 'Field5' across different years
bib_title_included %>%
    count(year, Field5) %>%
    ggplot(aes(x = year, y = n, fill = Field5)) + 
    geom_col(width = 0.7) +
    geom_text(position = position_stack(vjust = 0.5), aes(fill = Field5, label = n)) + 
    theme_classic() + 
    labs(x = "Year", y = "Article count", fill = "Discipline") + 
    theme(legend.position = "none", axis.title.x = element_text(size = 10))
```

```{r}


# not used


library(ggplot2)
library(dplyr)

# Step 1: Mutate columns for each field
bib_title_included <- bib_title_included %>%
  mutate(
    Field1 = case_when(str_detect(labels, "Terrestrial Natural Ecosystems and Biodiversity") ~ "Terrestrial Natural Ecosystems and Biodiversity",
                       TRUE ~ "unclear"),
    Field2 = case_when(str_detect(labels, "Economics and Social") ~ "Economics and Social",
                       TRUE ~ "unclear"),
    Field3 = case_when(str_detect(labels, "Environmental Governance") ~ "Environmental Governance",
                       TRUE ~ "unclear"),
    Field4 = case_when(str_detect(labels, "Health") ~ "Health",
                       TRUE ~ "unclear"),
    Field5 = case_when(str_detect(labels, "Environmental Accounting") ~ "Environmental Accounting",
                       TRUE ~ "unclear"),
    Field6 = case_when(str_detect(labels, "Aquatic Ecosystems") ~ "Aquatic Ecosystems and Biodiversity",
                       TRUE ~ "unclear"),
    Field7 = case_when(str_detect(labels, "Big Data") ~ "Big Data",
                       TRUE ~ "unclear"),
    Field8 = case_when(str_detect(labels, "Energy") ~ "Energy",
                       TRUE ~ "unclear"),
    Field9 = case_when(str_detect(labels, "Atmospheric Science") ~ "Atmospheric Science",
                       TRUE ~ "unclear"),
    Field10 = case_when(str_detect(labels, "Agriculture") ~ "Agriculture",
                        TRUE ~ "unclear"),
    Field11 = case_when(str_detect(labels, "Other") ~ "Other",
                        TRUE ~ "unclear")
  )

# Step 2: Combine the data for all fields
combined_data <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field1_Count = sum(Field1 == "Terrestrial Natural Ecosystems and Biodiversity"),
    Field2_Count = sum(Field2 == "Economics and Social"),
    Field3_Count = sum(Field3 == "Environmental Governance"),
    Field4_Count = sum(Field4 == "Health"),
    Field5_Count = sum(Field5 == "Environmental Accounting"),
    Field6_Count = sum(Field6 == "Aquatic Ecosystems and Biodiversity"),
    Field7_Count = sum(Field7 == "Big Data"),
    Field8_Count = sum(Field8 == "Energy"),
    Field9_Count = sum(Field9 == "Atmospheric Science"),
    Field10_Count = sum(Field10 == "Agriculture"),
    Field11_Count = sum(Field11 == "Other")
  )

# Step 3: Create the plot
combined_plot <- ggplot(combined_data, aes(x = year)) +
  geom_col(aes(y = Field1_Count, fill = "Terrestrial Natural Ecosystems and Biodiversity"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field2_Count, fill = "Economics and Social"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field3_Count, fill = "Environmental Governance"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field4_Count, fill = "Health"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field5_Count, fill = "Environmental Accounting"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field6_Count, fill = "Aquatic Ecosystems and Biodiversity"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field7_Count, fill = "Big Data"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field8_Count, fill = "Energy"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field9_Count, fill = "Atmospheric Science"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field10_Count, fill = "Agriculture"), width = 0.7, position = "dodge") +
  labs(x = "Year", y = "Article Count") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 8),
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
    plot.title = element_text(size = 14, face = "bold")
  )

# Display the plot
print(combined_plot)


library(ggplot2)
library(dplyr)

# Step 2: Combine the data for all fields
combined_data <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field1_Count = sum(Field1 == "Terrestrial Natural Ecosystems and Biodiversity"),
    Field2_Count = sum(Field2 == "Economics and Social"),
    Field3_Count = sum(Field3 == "Environmental Governance"),
    Field4_Count = sum(Field4 == "Health"),
    Field5_Count = sum(Field5 == "Environmental Accounting"),
    Field6_Count = sum(Field6 == "Aquatic Ecosystems and Biodiversity"),
    Field7_Count = sum(Field7 == "Big Data"),
    Field8_Count = sum(Field8 == "Energy"),
    Field9_Count = sum(Field9 == "Atmospheric Science"),
    Field10_Count = sum(Field10 == "Agriculture"),
    Field11_Count = sum(Field11 == "Other")
  )

# Step 3: Create the plot
combined_plot <- ggplot(combined_data, aes(x = as.factor(year))) +
  geom_col(aes(y = Field1_Count, fill = "Terrestrial Natural Ecosystems and Biodiversity"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field2_Count, fill = "Economics and Social"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field3_Count, fill = "Environmental Governance"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field4_Count, fill = "Health"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field5_Count, fill = "Environmental Accounting"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field6_Count, fill = "Aquatic Ecosystems and Biodiversity"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field7_Count, fill = "Big Data"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field8_Count, fill = "Energy"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field9_Count, fill = "Atmospheric Science"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field10_Count, fill = "Agriculture"), width = 0.7, position = "dodge") +
  geom_col(aes(y = Field11_Count, fill = "Other"), width = 0.7, position = "dodge") +
  labs(x = "Year", y = "Article count", fill = "Discipline") +
  theme_classic() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 8),
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
    plot.title = element_text(size = 14, face = "bold")
  )

# Display the plot
print(combined_plot)


```

Instead of using the above graphs, which couldn't comprehensively present the whole number for each category every year (for example, if two categories have the same number of publication, one is not shown because it is hidden by another)

we choose to see the trend of each field

```{r}

# Step 2: Combine the data for all fields
combined_data1 <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field2_Count = sum(Field2 == "Economics and Social"),
    Field3_Count = sum(Field3 == "Environmental Governance"),
    Field5_Count = sum(Field5 == "Environmental Accounting")
  )

# Step 3: Create the plot
combined_plot2 <- ggplot(combined_data1, aes(x = year)) +
  geom_line(aes(y = Field2_Count, color = "Economics and Social")) +
  geom_line(aes(y = Field3_Count, color = "Environmental Governance")) +
  geom_line(aes(y = Field5_Count, color = "Environmental Accounting")) +
  labs(x = "Year", y = "Article count", color = "Discipline") +
  scale_color_manual(values = c("Economics and Social" = "red", 
                                "Environmental Governance" = "blue", 
                                "Environmental Accounting" = "green")) +
  theme_minimal()

# Display the plot
print(combined_plot2)

```

```{r}


# Step 2: Combine the data for all fields
combined_data3 <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field7_Count = sum(Field7 == "Big Data"),
    Field4_Count = sum(Field4 == "Health"),
    Field8_Count = sum(Field8 == "Energy"),
    Field11_Count = sum(Field11 == "Other")
  )

# Step 3: Create the plot
combined_plot4 <- ggplot(combined_data3, aes(x = year)) +
  geom_line(aes(y = Field7_Count, color = "Big Data")) +
  geom_line(aes(y = Field4_Count, color = "Health")) +
  geom_line(aes(y = Field8_Count, color = "Energy")) +
  geom_line(aes(y = Field11_Count, color = "Other")) +
  labs(x = "Year", y = "Article count", color = "Discipline") +
  scale_color_manual(values = c("Big Data" = "darkgreen",
                                "Health" = "steelblue",
                                "Energy" = "darkorange",
                                "Other" = "purple")) +
  theme_minimal()

# Display the plot
print(combined_plot4)

```

```{r}
# Step 2: Combine the data for all fields
combined_data2 <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field1_Count = sum(Field1 == "Terrestrial Natural Ecosystems and Biodiversity"),
    Field6_Count = sum(Field6 == "Aquatic Ecosystems and Biodiversity"),
    Field9_Count = sum(Field9 == "Atmospheric Science"),
    Field10_Count = sum(Field10 == "Agriculture")
  )

# Step 3: Create the plot
combined_plot3 <- ggplot(combined_data2, aes(x = year)) +
  geom_line(aes(y = Field1_Count, color = "Terrestrial Natural Ecosystems and Biodiversity")) +
  geom_line(aes(y = Field6_Count, color = "Aquatic Ecosystems and Biodiversity")) +
  geom_line(aes(y = Field9_Count, color = "Atmospheric Science")) +
  geom_line(aes(y = Field10_Count, color = "Agriculture")) +
  labs(x = "Year", y = "Article count", color = "Discipline") +
  scale_color_manual(values = c("Terrestrial Natural Ecosystems and Biodiversity" = "#33a02c",
                                "Aquatic Ecosystems and Biodiversity" = "#1f78b4",
                                "Atmospheric Science" = "#e31a1c",
                                "Agriculture" = "#fdbf6f")) +
  theme_minimal()

# Display the plot
print(combined_plot3)

# Display the plot
print(combined_plot3)
```

```{r}
library(ggplot2)
#install.packages("cowplot")
library(cowplot)

# Set the common plot width and height
plot_width <- 6
plot_height <- 4

# Step 2: Combine the data for all fields
combined_data1 <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field2_Count = sum(Field2 == "Economics and Social"),
    Field3_Count = sum(Field3 == "Environmental Governance"),
    Field5_Count = sum(Field5 == "Environmental Accounting")
  )

# Step 3: Create the plot
combined_plot2 <- ggplot(combined_data1, aes(x = year)) +
  geom_line(aes(y = Field2_Count, color = "Economics and Social")) +
  geom_line(aes(y = Field3_Count, color = "Environmental Governance")) +
  geom_line(aes(y = Field5_Count, color = "Environmental Accounting")) +
  labs(x = "Year", y = "Article count", color = "Discipline") +
  scale_color_manual(values = c("Economics and Social" = "red",
                                "Environmental Governance" = "blue",
                                "Environmental Accounting" = "green")) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  coord_cartesian(clip = "off")  # Prevent clipping of legends

# Step 2: Combine the data for all fields
combined_data3 <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field7_Count = sum(Field7 == "Big Data"),
    Field4_Count = sum(Field4 == "Health"),
    Field8_Count = sum(Field8 == "Energy"),
    Field11_Count = sum(Field11 == "Other")
  )

# Step 3: Create the plot
combined_plot4 <- ggplot(combined_data3, aes(x = year)) +
  geom_line(aes(y = Field7_Count, color = "Big Data")) +
  geom_line(aes(y = Field4_Count, color = "Health")) +
  geom_line(aes(y = Field8_Count, color = "Energy")) +
  geom_line(aes(y = Field11_Count, color = "Other")) +
  labs(x = "Year", y = "Article count", color = "Discipline") +
  scale_color_manual(values = c("Big Data" = "darkgreen",
                                "Health" = "steelblue",
                                "Energy" = "darkorange",
                                "Other" = "goldenrod")) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  coord_cartesian(clip = "off")  # Prevent clipping of legends

# Step 2: Combine the data for all fields
combined_data2 <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field1_Count = sum(Field1 == "Terrestrial Natural Ecosystems and Biodiversity"),
    Field6_Count = sum(Field6 == "Aquatic Ecosystems and Biodiversity"),
    Field9_Count = sum(Field9 == "Atmospheric Science"),
    Field10_Count = sum(Field10 == "Agriculture")
  )

# Step 3: Create the plot
combined_plot3 <- ggplot(combined_data2, aes(x = year)) +
  geom_line(aes(y = Field1_Count, color = "Terrestrial Natural Ecosystems and Biodiversity")) +
  geom_line(aes(y = Field6_Count, color = "Aquatic Ecosystems and Biodiversity")) +
  geom_line(aes(y = Field9_Count, color = "Atmospheric Science")) +
  geom_line(aes(y = Field10_Count, color = "Agriculture")) +
  labs(x = "Year", y = "Article count", color = "Discipline") +
  scale_color_manual(values = c("Terrestrial Natural Ecosystems and Biodiversity" = "#33a02c",
                                "Aquatic Ecosystems and Biodiversity" = "#1f78b4",
                                "Atmospheric Science" = "#e31a1c",
                                "Agriculture" = "#fdbf6f")) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  coord_cartesian(clip = "off")  # Prevent clipping of legends

# Combine and align the plots
plot_grid(combined_plot2, combined_plot4, combined_plot3, ncol = 1, align = "v", rel_heights = rep(1, 3))




```

```{r}
library(ggplot2)
library(cowplot)

# Set the common plot width and height
plot_width <- 6
plot_height <- 20

# Set the axis text size and legend text size
axis_text_size <- 10
legend_text_size <- 8

# Step 2: Combine the data for all fields
combined_data1 <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field2_Count = sum(Field2 == "Economics and Social"),
    Field3_Count = sum(Field3 == "Environmental Governance"),
    Field5_Count = sum(Field5 == "Environmental Accounting")
  )

# Step 3: Create the plot
combined_plot2 <- ggplot(combined_data1, aes(x = year)) +
  geom_line(aes(y = Field2_Count, color = "Economics and Social")) +
  geom_line(aes(y = Field3_Count, color = "Environmental Governance")) +
  geom_line(aes(y = Field5_Count, color = "Environmental Accounting")) +
  labs(x = "Year", y = "Article count", color = "Discipline") +
  scale_color_manual(values = c("Economics and Social" = "red",
                                "Environmental Governance" = "blue",
                                "Environmental Accounting" = "green")) +
  theme_minimal() +
  theme(legend.position = "bottom",
        axis.text = element_text(size = axis_text_size),
        legend.text = element_text(size = legend_text_size),
        legend.key.size = unit(2, "lines")) +
  coord_cartesian(clip = "off")  # Prevent clipping of legends

# Step 2: Combine the data for all fields
combined_data3 <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field7_Count = sum(Field7 == "Big Data"),
    Field4_Count = sum(Field4 == "Health"),
    Field8_Count = sum(Field8 == "Energy"),
    Field11_Count = sum(Field11 == "Other")
  )

# Step 3: Create the plot
combined_plot4 <- ggplot(combined_data3, aes(x = year)) +
  geom_line(aes(y = Field7_Count, color = "Big Data")) +
  geom_line(aes(y = Field4_Count, color = "Health")) +
  geom_line(aes(y = Field8_Count, color = "Energy")) +
  geom_line(aes(y = Field11_Count, color = "Other")) +
  labs(x = "Year", y = "Article count", color = "Discipline") +
  scale_color_manual(values = c("Big Data" = "darkgreen",
                                "Health" = "steelblue",
                                "Energy" = "darkorange",
                                "Other" = "#EE1289")) +
  theme_minimal() +
  theme(legend.position = "bottom",
        axis.text = element_text(size = axis_text_size),
        legend.text = element_text(size = legend_text_size),
        legend.key.size = unit(2, "lines")) +
  coord_cartesian(clip = "off")  # Prevent clipping of legends

# Step 2: Combine the data for all fields
combined_data2 <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field1_Count = sum(Field1 == "Terrestrial Natural Ecosystems and Biodiversity"),
    Field6_Count = sum(Field6 == "Aquatic Ecosystems and Biodiversity"),
    Field9_Count = sum(Field9 == "Atmospheric Science"),
    Field10_Count = sum(Field10 == "Agriculture")
  )

# Step 3: Create the plot
combined_plot3 <- ggplot(combined_data2, aes(x = year)) +
  geom_line(aes(y = Field1_Count, color = "Terrestrial Natural Ecosystems and Biodiversity")) +
  geom_line(aes(y = Field6_Count, color = "Aquatic Ecosystems and Biodiversity")) +
  geom_line(aes(y = Field9_Count, color = "Atmospheric Science")) +
  geom_line(aes(y = Field10_Count, color = "Agriculture")) +
  labs(x = "Year", y = "Article count", color = "Discipline") +
  scale_color_manual(values = c("Terrestrial Natural Ecosystems and Biodiversity" = "#33a02c",
                                "Aquatic Ecosystems and Biodiversity" = "#1f78b4",
                                "Atmospheric Science" = "#e31a1c",
                                "Agriculture" = "#fdbf6f")) +
  theme_minimal() +
  theme(legend.position = "bottom",
        axis.text = element_text(size = axis_text_size),
        legend.text = element_text(size = legend_text_size),
        legend.key.size = unit(2, "lines"),
        legend.box = "horizontal",
        legend.title.align = 0.5) +
  guides(color = guide_legend(title.position = "top", nrow = 2)) +
  coord_cartesian(clip = "off")  # Prevent clipping of legends



combined_plot2
combined_plot4
combined_plot3

# Combine and align the plots
#plot_grid(combined_plot2, combined_plot4, combined_plot3, ncol = 1, align = "v", #rel_heights = rep(1, 3), labels = c("Graph 1", "Graph 2", "Graph 3"))


```

### U Study Field Trend Plot

same scale of x and y axis, changed to distinctive colours to represent each category

```{r}


library(ggplot2)
library(cowplot)

# Set the common plot width and height
plot_width <- 6
plot_height <- 4

# Set the axis text size and legend text size
axis_text_size <- 10
legend_text_size <- 8

# Step 2: Combine the data for all fields
combined_data1 <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field2_Count = sum(Field2 == "Economics and Social"),
    Field3_Count = sum(Field3 == "Environmental Governance"),
    Field5_Count = sum(Field5 == "Environmental Accounting")
  )

# Step 3: Create the plot
combined_plot2 <- ggplot(combined_data1, aes(x = year)) +
  geom_line(aes(y = Field2_Count, color = "Economics and Social")) +
  geom_line(aes(y = Field3_Count, color = "Environmental Governance")) +
  geom_line(aes(y = Field5_Count, color = "Environmental Accounting")) +
  labs(x = "Year", y = "Article count", color = "Discipline") +
  scale_color_manual(values = c("Economics and Social" = "red",
                                "Environmental Governance" = "blue",
                                "Environmental Accounting" = "green")) +
  theme_minimal() +
  theme(legend.position = "bottom",
        axis.text = element_text(size = axis_text_size),
        legend.text = element_text(size = legend_text_size),
        legend.key.size = unit(2, "lines")) +
  coord_cartesian(clip = "off")  # Prevent clipping of legends

# Step 2: Combine the data for all fields
combined_data3 <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field7_Count = sum(Field7 == "Big Data"),
    Field4_Count = sum(Field4 == "Health"),
    Field8_Count = sum(Field8 == "Energy"),
    Field11_Count = sum(Field11 == "Other")
  )

# Step 3: Create the plot
combined_plot4 <- ggplot(combined_data3, aes(x = year)) +
  geom_line(aes(y = Field7_Count, color = "Big Data")) +
  geom_line(aes(y = Field4_Count, color = "Health")) +
  geom_line(aes(y = Field8_Count, color = "Energy")) +
  geom_line(aes(y = Field11_Count, color = "Other")) +
  labs(x = "Year", y = "Article count", color = "Discipline") +
  scale_color_manual(values = c("Big Data" = "#EE1289",
                                "Health" = "#27408B",
                                "Energy" = "black",
                                "Other" = "#9A32CD")) +
  theme_minimal() +
  theme(legend.position = "bottom",
        axis.text = element_text(size = axis_text_size),
        legend.text = element_text(size = legend_text_size),
        legend.key.size = unit(2, "lines")) +
  coord_cartesian(clip = "off")  # Prevent clipping of legends

# Step 2: Combine the data for all fields
combined_data2 <- bib_title_included %>%
  group_by(year) %>%
  summarize(
    Field1_Count = sum(Field1 == "Terrestrial Natural Ecosystems and Biodiversity"),
    Field6_Count = sum(Field6 == "Aquatic Ecosystems and Biodiversity"),
    Field9_Count = sum(Field9 == "Atmospheric Science"),
    Field10_Count = sum(Field10 == "Agriculture")
  )

# Step 3: Create the plot
combined_plot3 <- ggplot(combined_data2, aes(x = year)) +
  geom_line(aes(y = Field1_Count, color = "Terrestrial Natural Ecosystems and Biodiversity")) +
  geom_line(aes(y = Field6_Count, color = "Aquatic Ecosystems and Biodiversity")) +
  geom_line(aes(y = Field9_Count, color = "Atmospheric Science")) +
  geom_line(aes(y = Field10_Count, color = "Agriculture")) +
  labs(x = "Year", y = "Article count", color = "Discipline") +
  scale_color_manual(values = c("Terrestrial Natural Ecosystems and Biodiversity" = "#33a02c",
                                "Aquatic Ecosystems and Biodiversity" = "#1f78b4",
                                "Atmospheric Science" = "#CD5B45",
                                "Agriculture" = "#fdbf6f")) +
  theme_minimal() +
  theme(legend.position = "bottom",
        axis.text = element_text(size = axis_text_size),
        legend.text = element_text(size = legend_text_size),
        legend.key.size = unit(2, "lines"),
        legend.box = "horizontal",
        legend.title.align = 1) +
  coord_cartesian(clip = "off")  # Prevent clipping of legends


# Set the common y-axis limits for all plots
y_axis_limits <- c(0, max(max(combined_data1$Field2_Count), max(combined_data1$Field3_Count), max(combined_data1$Field5_Count), max(combined_data3$Field7_Count), max(combined_data3$Field4_Count), max(combined_data3$Field8_Count), max(combined_data3$Field11_Count), max(combined_data2$Field1_Count), max(combined_data2$Field6_Count), max(combined_data2$Field9_Count), max(combined_data2$Field10_Count)))

# Apply the common y-axis limits to all plots
combined_plot2 <- combined_plot2 + coord_cartesian(ylim = y_axis_limits)
combined_plot4 <- combined_plot4 + coord_cartesian(ylim = y_axis_limits)
combined_plot3 <- combined_plot3 + coord_cartesian(ylim = y_axis_limits)

# Display the plots
print(combined_plot2)
print(combined_plot4)
print(combined_plot3)

# Combine and align the plots
plot_grid(combined_plot2, combined_plot4, combined_plot3, ncol = 1, align = "v", rel_heights = rep(1, 3))


# Show in the new window to get the full pictures of three graphs


```

```{r}

# Not used 
#install.packages("viridis")
library(ggplot2)
library(viridis)  # Required for custom color palette

# Define custom color palette
my_colors <- viridis(n = 11)

# Create a data frame with the field frequencies by year
field_year_frequencies <- bib_title_included %>%
  group_by(year) %>%
  summarise(
    Field1 = sum(Field1 == "Terrestrial Natural Ecosystems and Biodiversity"),
    Field2 = sum(Field2 == "Economics and Social"),
    Field3 = sum(Field3 == "Environmental Governance"),
    Field4 = sum(Field4 == "Health"),
    Field5 = sum(Field5 == "Environmental Accounting"),
    Field6 = sum(Field6 == "Aquatic Ecosystems and Biodiversity"),
    Field7 = sum(Field7 == "Big Data"),
    Field8 = sum(Field8 == "Energy"),
    Field9 = sum(Field9 == "Atmospheric Science"),
    Field10 = sum(Field10 == "Agriculture"),
    Field11 = sum(Field11 == "Other")
  )

# Reshape the data for plotting
field_year_frequencies <- tidyr::pivot_longer(
  field_year_frequencies,
  cols = -year,
  names_to = "Field",
  values_to = "Frequency"
)

# Convert "year" to lowercase
field_year_frequencies$year <- tolower(field_year_frequencies$year)

# Create the line graph with custom colors
ggplot(field_year_frequencies, aes(x = year, y = Frequency, color = Field, group = Field)) +
  geom_line() +
  scale_color_manual(values = my_colors) +
  xlab("Year") +
  ylab("Frequency") +
  ggtitle("Frequency of Fields over Time") +
  theme_minimal()



```

## 9.2 U Informing Levels

? Case study in Developed Countries ? Case study in Developing Countries ? Informing International

analysis in Reports

```{r}
#create levels variable
bib_title_included11 <- bib_title_included %>%          
         mutate(levels = case_when(str_detect(labels, "Developing Areas") ~ "Developing Areas", #just Developing Areas
                               str_detect(labels, "Developed Areas" ) ~ "Developed Areas", #Developed Area
                               TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included11)

#View(bib_title_included11)
table(bib_title_included11$levels)

#create animal_type variable
bib_title_included12 <- bib_title_included %>%          
         mutate(international = case_when(str_detect(labels, "International") ~ "International", #just international
                               TRUE ~ "unclear")) #some will have none and we leave them as "unclear"
names(bib_title_included12)
table(bib_title_included12$international)


#we can do a table of counts by two variables at the same time:
table(bib_title_included11$levels, bib_title_included12$international)

```

```{r}

# Plot with one variable with label counts

#calculate and sort by count
count_levels <- bib_title_included11 %>%
    count(levels) %>%
    arrange(desc(n))

#calculate percentages
percent_levels <- count_levels %>%
    mutate(percent = (n/sum(n)) * 100)

#round percentages
percent_levels$percent <- round(percent_levels$percent, digits = 0)

#as factor and ordering for a nicer plot
percent_levels$levels <- factor(percent_levels$levels,
    level = percent_levels$levels[order(percent_levels$n, decreasing = TRUE)])

#for manually setting fill colours
my.cols <- (c("#BEAED4", "#FFFF99", "#386CB0")) 

#make the plot
ggplot(percent_levels, aes(x = levels, y = percent)) + 
  geom_col(aes(fill = levels), width = 0.7) + 
  geom_text(aes(label = percent), hjust = -0.2) + coord_flip() +
  scale_y_continuous(name = "Percent (%)") + 
  xlab("levels") + 
  scale_fill_manual(values = my.cols) +
  theme_classic() + 
  theme(legend.position = "none")


#Plot topic by year:

bib_title_included11 %>%
    count(year, levels) %>%
    ggplot(aes(x = year, y = n, fill = levels)) + 
    geom_col(width = 0.7) +
    geom_text(position = position_stack(vjust = 0.5), aes(fill = levels, label = n)) + 
    theme_classic() + 
    labs(x = "Year", y = "Article count", fill = "Discipline") + 
    theme(legend.position = "none", axis.title.x = element_text(size = 10))
```

```{r}

#Plot topic by year:

bib_title_included12 %>%
    count(year, international) %>%
    ggplot(aes(x = year, y = n, fill = international)) + 
    geom_col(width = 0.7) +
    geom_text(position = position_stack(vjust = 0.5), aes(fill = international, label = n)) + 
    theme_classic() + 
    labs(x = "Year", y = "Article count", fill = "Discipline") + 
    theme(legend.position = "none", axis.title.x = element_text(size = 10))
```

# 10. Make additional plots based on bibliometric information

## 10.1 U Keywords Worldcloud

```{r}
bib2 <- biblioAnalysis(bib_title_included, sep = ";")
S <- summary(object = bib2, k = 50, pause = FALSE) #only top 50 keywords
keywords <- S$MostRelKeywords #exract single vector with most relevant keywords
words <- keywords[, 1] #only using Author Keywords (DE) 
freq <- as.numeric(keywords[, 2]) #vector of keyword frequencies for Author Keywords (DE) 
prob <- freq/sum(freq)

#words <- keywords[, 3] #only using Keywords-Plus (ID) 
#freq <- as.numeric(keywords[, 4]) #vector of keyword frequencies for Keywords-Plus (ID) 
#prob <- freq/sum(freq)
#install.packages("wordcloud2")
library("wordcloud2")
wordcloud2(data.frame(words, prob), shuffle = TRUE, size = 2, color = "random-dark") 
```

## 10.2 World Map

```{r}
#View(bib_title_included)

# Extract country information from the "AU_CO" 
bibmap <- metaTagExtraction(bib_title_included, Field = "AU_CO", sep = ";") 
bibmap <- metaTagExtraction(bibmap, Field = "AU_CO", sep = ";") #just getting the countries out of affiliations
table(bibmap$AU_CO) #see the country counts as a simple table

# Create a data frame with counts of articles from each country
bibmap %>% 
  group_by(AU_CO) %>% 
  count() %>% 
  filter(!is.na(AU_CO)) -> firstcountrycounts

#print(firstcountrycounts)


# Load world map data and remove countries with longitude >180 to make an equal projection-like map
world_map <- map_data("world") %>% 
  filter(! long > 180)

str(world_map)
unique(world_map$region)

# Format country names to match regions on the world map
firstcountrycounts$region <- str_to_title(firstcountrycounts$AU_CO)
firstcountrycounts$region[firstcountrycounts$region == "Usa"] <- "USA" 
firstcountrycounts$region[firstcountrycounts$region == "Korea"] <- "South Korea"
firstcountrycounts$region[firstcountrycounts$region == "United Kingdom"] <- "UK"
#View(firstcountrycounts$region)
unique_characters <- unique(firstcountrycounts$region)
print(unique_characters)



firstcountrycounts$region

# Join count data with map data and set missing counts to zero
emptymap <- tibble(region = unique(world_map$region), n = rep(0,length(unique(world_map$region))))

fullmap <- left_join(emptymap, firstcountrycounts, by = "region")
fullmap$n <- fullmap$n.x + fullmap$n.y
fullmap$n[is.na(fullmap$n)] <- 0

emptymap

library("ggplot2")
#install.packages("maps")
#install.packages("mapdata")
#install.packages("rgeos")
#install.packages("ggmap")


library("mapdata")

# Create a plot of the world map with regions colored based on article counts
fullmap %>% 
  ggplot(aes(fill = n, map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat) +
  coord_map("moll") + # Mollweide projection
  scale_fill_gradient(low = "#ECF207", high = "#8B0000", # set color gradient
                    name = "Score", na.value = "gray",
                    limits = c(0.1, 24),
                    guide = guide_colorbar(direction = "vertical.",
                                           barwidth = unit(15, units = "mm"), 
                                           barheight = unit(50, units = "mm"))) +
  guides(fill = guide_colourbar()) +
  theme(panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA))


```

### U Table (Countries - all authors counts)

View(firstcountrycounts)

```{r}
#View(bib_title_included)

# Extract country information from the "AU_CO" 
bibmap <- metaTagExtraction(bib_title_included, Field = "AU_CO", sep = ";") 
bibmap <- metaTagExtraction(bibmap, Field = "AU_CO", sep = ";") #just getting the countries out of affiliations
table(bibmap$AU_CO) #see the country counts as a simple table

# Create a data frame with counts of articles from each country
bibmap %>% 
  group_by(AU_CO) %>% 
  count() %>% 
  filter(!is.na(AU_CO)) -> firstcountrycounts

#print(firstcountrycounts)





# Assuming you have already run the previous code and have the bibmap data frame with the "AU_CO" column.

# Split the "AU_CO" strings at the ";" symbol and create separate rows for each country
bibmap <- bibmap %>%
  separate_rows(AU_CO, sep = ";") %>%
  filter(!is.na(AU_CO))

# Create a data frame with counts of articles from each country
bibmap %>%
  group_by(AU_CO) %>%
  count() %>%
  ungroup() -> firstcountrycounts

print(firstcountrycounts)
View(firstcountrycounts)



# Load world map data and remove countries with longitude >180 to make an equal projection-like map
world_map <- map_data("world") %>% 
  filter(! long > 180)

str(world_map)
unique(world_map$region)

# Format country names to match regions on the world map
firstcountrycounts$region <- str_to_title(firstcountrycounts$AU_CO)
firstcountrycounts$region[firstcountrycounts$region == "Usa"] <- "USA" 
firstcountrycounts$region[firstcountrycounts$region == "Korea"] <- "South Korea"
firstcountrycounts$region[firstcountrycounts$region == "United Kingdom"] <- "UK"
#View(firstcountrycounts$region)
unique_characters <- unique(firstcountrycounts$region)
print(unique_characters)



firstcountrycounts$region

# Join count data with map data and set missing counts to zero
emptymap <- tibble(region = unique(world_map$region), n = rep(0,length(unique(world_map$region))))

fullmap <- left_join(emptymap, firstcountrycounts, by = "region")
fullmap$n <- fullmap$n.x + fullmap$n.y
fullmap$n[is.na(fullmap$n)] <- 0

emptymap

library("ggplot2")
#install.packages("maps")
#install.packages("mapdata")
#install.packages("rgeos")
#install.packages("ggmap")


library("mapdata")

# Create a plot of the world map with regions colored based on article counts
fullmap %>% 
  ggplot(aes(fill = n, map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat) +
  coord_map("moll") + # Mollweide projection
  #scale_fill_gradient(low = "#ECF207", high = "#8B0000", # set color gradient
                    #name = "Score", na.value = "gray",
                    #limits = c(0.1, 24),
                    #guide = guide_colorbar(direction = "vertical.",
                                           #barwidth = unit(15, units = "mm"), 
                                           #barheight = unit(50, units = "mm"))) +
  guides(fill = guide_colourbar()) +
  theme(panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA))

fullmap %>% 
  ggplot(aes(fill = n, map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat) +
  coord_map("moll") + # Mollweide projection
  scale_fill_gradient(low = "green", high = "blue", na.value = "gray", name = "Value") +  # Customize gradient colors
  guides(fill = guide_colourbar()) +
  theme(panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA))




```

```{r}


# Assuming you have the necessary packages and data loaded

# Create a plot of the world map with regions colored based on article counts
fullmap %>%
  ggplot(aes(fill = n, map_id = region)) +
  geom_map(map = world_map, color = "white", size = 0.1) +  # Adding white borders around regions
  expand_limits(x = world_map$long, y = world_map$lat) +
  coord_map("moll") + # Mollweide projection
  guides(fill = guide_colourbar()) +
  theme_minimal() +  # Using a minimal theme for cleaner look
  labs(title = "World Map Showing Most Productive Countries",
       subtitle = "Your Subtitle",
       caption = "Data Source: Scopus") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        legend.title = element_text(size = 12, face = "bold"),
        legend.text = element_text(size = 10),
        panel.background = element_rect(fill = "white", colour = NA),  # Setting white background
        plot.background = element_rect(fill = "white", colour = NA))


   # ? theme_map() + #nice simple theme for the map

```

```{r}
library(ggplot2)

# Assuming you have already loaded the required data and packages
# fullmap <- ... (your data preparation)
# world_map <- ... (your world map data)

fullmap %>% 
  ggplot(aes(fill = n, map_id = region)) +
  geom_map(map = world_map, color = "white", size = 0.1) +  # Adding white borders around regions
  expand_limits(x = world_map$long, y = world_map$lat) +
  coord_map("moll") + # Mollweide projection
  scale_fill_gradient(low = "#63B8FF", high = "#7A378B", na.value = "gray", name = "Value") +  # Customize gradient colors
  guides(fill = guide_colourbar(title = "Legend Title")) +  # Add a title to the color scale legend
  theme_map() +  # Using a simple theme for the map
  labs(title = "World Map Showing Most Productive Countries",
       subtitle = "Your Subtitle",
       caption = "Data Source: Scopus") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        legend.title = element_text(size = 12, face = "bold"),
        legend.text = element_text(size = 10),
        panel.background = element_rect(fill = "white", colour = NA),  # Setting white background
        plot.background = element_rect(fill = "white", colour = NA))

```

```{r}
#formulate map showing publications by country
library(viridis)
map <- fullmap %>% 
  ggplot(aes(fill = n, map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat) + 
  coord_map("moll") + 
  theme_bw() +
  theme(legend.position="bottom", axis.text.x=element_blank(),
        axis.ticks.x=element_blank(), axis.title.x=element_blank(), 
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(), axis.title.y=element_blank(), plot.title = element_text(hjust = 0.5)) +
   #scale_fill_viridis(direction=-1, option="viridis", breaks=c(50,100,150,200,250,300), limits = c(1, 60), guide = guide_colorbar(direction = "vertical.")) +
  guides(fill = guide_colourbar(barwidth = unit(10, units = "cm"), barheight = unit(10, units = "mm"))) + labs(fill="Number of \nPublications", title = "Distribution of Publications by Countries")
 
map #plot
```

```{r}
library(ggplot2)

# Assuming you have already loaded the required data and packages
# fullmap <- ... (your data preparation)
# world_map <- ... (your world map data)

map <- fullmap %>% 
  ggplot(aes(fill = n, map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat) + 
  coord_map("moll") + 
  scale_fill_gradient(low = "#63B8FF", high = "#FF6A6A", na.value = "gray", name = "Number of Publications", breaks = c(50, 100, 150, 200, 250, 300)) +  # Customize gradient colors and set breaks
  theme_minimal() +  # Using a minimal theme for cleaner look
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.title.y = element_blank(),
        legend.position = "bottom",
        legend.direction = "horizontal",  # Horizontal legend for better fit
        legend.box = "horizontal",  # Draw a box around the horizontal legend
        legend.key.width = unit(2, "cm"),  # Set the width of legend key
        legend.key.height = unit(0.5, "cm"),  # Set the height of legend key
        plot.title = element_text(hjust = 0.5)) +
  guides(fill = guide_colourbar(barwidth = unit(15, units = "cm"),  # Increase the width of the color scale bar
                                barheight = unit(1, units = "cm"))) +  # Increase the height of the color scale bar
  labs(fill = "Number of\nPublications", title = "Distribution of Publications by Countries")

print(map)
```

### U World Map

```{r}
library(ggplot2)

# Assuming you have already loaded the required data and packages
# fullmap <- ... (your data preparation)
# world_map <- ... (your world map data)
#install.packages("ggthemes")
library(ggthemes)


fullmap %>% 
  ggplot(aes(fill = n, map_id = region)) +
  geom_map(map = world_map, color = "white", size = 0.1) +  # Adding white borders around regions
  expand_limits(x = world_map$long, y = world_map$lat) +
  coord_map("moll") + # Mollweide projection
  scale_fill_gradient(low = "#63B8FF", high = "#FF6A6A", na.value = "gray", name = "Value", breaks = c(50, 100, 150, 200, 250, 300)) +  # Customize gradient colors and set breaks
  guides(fill = guide_colourbar(title = "Legend Title")) +  # Add a title to the color scale legend
  theme_map() +  # Using a simple theme for the map
  labs(title = "Geographical Hotspots of Research Most Tempting to Policy Making",
       subtitle = "2000-2023",
       caption = "Data Source: Scopus") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        legend.title = element_text(size = 12, face = "bold"),
        legend.text = element_text(size = 10),
        panel.background = element_rect(fill = "white", colour = NA),  # Setting white background
        plot.background = element_rect(fill = "white", colour = NA))
```

## 10.3 U Countries Collaboration Plot

```{r}
#using a bit different approach to get countries out
bib3 <- metaTagExtraction(bib_title_included, Field = "AU_CO", sep = ";")
NetMatrix <- biblioNetwork(bib3, analysis = "collaboration", network = "countries", sep = ";") #this extracts all sort of stuff
results <- biblioAnalysis(bib3, sep = ";")

S2 <- summary(object = results, k = 8, pause = FALSE) #only using top 20 countries

MostProdCountries <- S2$MostProdCountries
MostProdCountries$Articles <- as.numeric(MostProdCountries$Articles) #counts as numeric values
Countries <- MostProdCountries[1:8, "Country"] #trim again to top 10, could change this to smaller number if needed
Countries <- trimws(Countries) #trim white space after country name
net_matrix <- as.matrix(NetMatrix) #convert to matrix
str(net_matrix)

intersect(rownames(net_matrix), Countries)

setdiff(rownames(net_matrix), Countries)

setdiff(Countries, rownames(net_matrix))
#> character(0)
small_matrix <- net_matrix[Countries, Countries]
diag(small_matrix) <- 0  #get rid of collaboration with same country

#install.packages("circlize")

# Load the circlize package
library(circlize)

# Use the circos.clear() function to clear the current circular layout

circos.clear() #prepare plotting area
chordDiagramFromMatrix(small_matrix) #make the plot
chordDiagramFromMatrix(small_matrix, grid.col = c("#330066", "#CC6699", "#FF9966", "#33CCFF", "#339999", "#33CC99", "#CCFF00", "#FFBBFF"), title("Collaboration between Most Productive Countries"))

```
